#lang racket

(require "utils.rkt")

(define test '(255 125 185 173 255 129 187 175 255 132 186 173 255 133 183 172 255 135 182 172 255 136 182 171 255 138 181 171 255 135 182 174 255 135 181 171 255 134 180 169 255 135 179 166 255 135 179 164 255 134 177 160 255 132 175 156 255 131 174 155 255 138 179 165 255 133 174 160 255 127 185 173 255 129 185 174 255 131 185 172 255 133 183 171 255 135 181 170 255 137 181 168 255 137 181 168 255 136 182 171 255 133 179 168 255 129 175 162 255 127 171 156 255 128 171 154 255 131 174 155 255 133 176 156 255 135 177 157 255 130 168 153 255 130 168 153 255 128 186 174 255 129 185 172 255 132 184 172 255 131 181 169 255 133 179 166 255 135 179 164 255 136 178 164 255 132 179 163 255 131 175 160 255 126 170 153 255 122 165 146 255 122 165 145 255 127 169 147 255 130 172 150 255 131 173 149 255 129 166 148 255 134 171 153 255 129 185 174 255 131 185 172 255 131 183 170 255 132 180 166 255 134 178 161 255 134 177 160 255 134 177 158 255 129 174 154 255 131 174 155 255 129 172 152 255 126 168 146 255 125 167 143 255 128 168 144 255 127 167 141 255 124 164 138 255 129 164 140 255 134 169 145 255 129 185 172 255 131 185 171 255 132 183 168 255 133 180 162 255 133 178 158 255 133 176 156 255 133 175 153 255 130 172 150 255 133 175 151 255 134 176 152 255 133 173 147 255 132 172 146 255 131 170 143 255 126 165 138 255 119 158 129 255 120 153 122 255 120 155 123 255 129 183 170 255 124 177 161 255 123 174 157 255 128 175 155 255 131 175 152 255 128 170 146 255 125 168 141 255 127 167 140 255 129 169 142 255 131 170 143 255 129 168 139 255 126 162 134 255 121 158 127 255 118 155 124 255 119 154 124 255 118 150 111 255 109 141 102 255 127 181 167 255 122 175 157 255 121 170 149 255 124 169 146 255 124 168 141 255 124 167 139 255 124 165 135 255 129 168 137 255 130 167 136 255 126 163 132 255 122 157 125 255 117 152 120 255 115 148 117 255 113 147 114 255 113 147 114 255 115 146 102 255 110 141 97 255 128 181 165 255 122 173 154 255 120 168 146 255 119 165 137 255 121 164 134 255 124 165 131 255 126 166 131 255 134 169 136 255 128 163 130 255 121 155 122 255 113 147 112 255 111 142 108 255 109 140 106 255 110 140 106 255 110 140 106 255 111 138 93 255 112 139 94 255 129 182 162 255 123 175 153 255 120 168 142 255 120 165 134 255 121 165 130 255 125 167 129 255 129 170 130 255 132 164 127 255 126 158 121 255 117 149 112 255 112 142 106 255 110 140 104 255 112 139 104 255 113 140 105 255 114 140 105 255 106 132 87 255 111 137 92 255 126 178 156 255 124 174 149 255 120 169 140 255 120 165 132 255 122 164 126 255 125 166 124 255 127 168 124 255 122 153 112 255 120 148 108 255 115 143 103 255 113 141 101 255 114 140 101 255 116 141 102 255 116 141 102 255 115 140 101 255 107 130 88 255 114 137 95 255 120 172 149 255 119 169 142 255 119 166 134 255 118 164 127 255 118 160 120 255 117 158 114 255 118 157 110 255 113 140 99 255 113 140 99 255 112 139 98 255 114 139 99 255 114 139 99 255 116 138 99 255 114 136 98 255 113 135 97 255 108 128 91 255 113 135 97 255 117 169 146 255 116 166 139 255 118 165 133 255 117 162 123 255 114 157 114 255 107 149 101 255 104 144 94 255 110 135 93 255 112 137 95 255 114 139 97 255 116 139 97 255 114 136 97 255 112 133 94 255 110 131 92 255 109 130 91 255 104 123 91 255 108 127 95 255 117 170 144 255 116 166 137 255 118 165 131 255 118 163 124 255 112 155 110 255 102 144 96 255 95 135 85 255 112 137 95 255 115 140 98 255 119 142 100 255 118 141 99 255 114 135 94 255 110 131 90 255 109 127 89 255 108 126 88 255 98 117 89 255 102 121 93 255 116 165 135 255 122 169 133 255 124 169 128 255 119 161 115 255 112 151 104 255 110 146 98 255 110 143 96 255 117 141 93 255 116 139 93 255 112 135 89 255 112 133 90 255 114 135 94 255 113 131 93 255 105 122 86 255 102 119 85 255 96 111 88 255 103 118 97 255 115 164 132 255 121 168 132 255 120 165 124 255 109 151 105 255 103 141 94 255 104 140 92 255 108 141 94 255 116 140 92 255 116 139 93 255 111 134 88 255 108 129 88 255 107 128 89 255 105 122 86 255 99 116 82 255 99 116 82 255 96 111 90 255 91 106 85 255 115 164 132 255 122 168 131 255 117 162 119 255 102 144 98 255 95 133 86 255 100 136 88 255 108 141 94 255 113 137 89 255 113 137 89 255 108 131 87 255 104 125 84 255 103 123 86 255 101 118 84 255 98 115 83 255 99 115 86 255 101 114 96 255 84 97 79 255 118 165 133 255 121 167 130 255 118 161 118 255 106 145 100 255 98 136 87 255 103 139 91 255 110 143 96 255 109 133 85 255 108 132 84 255 102 125 81 255 101 122 83 255 104 124 89 255 104 121 89 255 100 116 89 255 99 115 89 255 96 107 91 255 75 86 70 255 116 161 128 255 116 161 122 255 117 158 116 255 110 149 102 255 107 143 95 255 109 142 95 255 109 142 95 255 109 133 83 255 105 129 81 255 98 121 77 255 99 120 81 255 104 123 91 255 104 120 93 255 94 109 86 255 88 103 82 255 75 86 72 255 61 72 58 255 113 157 122 255 111 153 115 255 112 153 109 255 112 150 103 255 110 146 98 255 110 143 96 255 108 140 93 255 112 136 86 255 108 131 85 255 99 122 80 255 96 116 79 255 99 118 88 255 94 109 86 255 81 96 77 255 74 88 71 255 66 74 63 255 60 68 57 255 116 157 123 255 111 151 114 255 111 150 106 255 109 147 100 255 111 144 97 255 111 143 96 255 109 141 94 255 114 138 90 255 111 134 88 255 103 126 84 255 96 116 81 255 92 110 84 255 85 100 79 255 75 89 74 255 72 86 73 255 70 75 68 255 67 72 66))

(integer? (/ (length test) 4))
(define (color->gray byte-list)
  (cond ((empty? byte-list) '())
        (else (match byte-list
                [(list a b c d e ...) (append (list a
                                                    (round-to-int (/ (+ b c d) 3))
                                                    (round-to-int (/ (+ b c d) 3))
                                                    (round-to-int (/ (+ b c d) 3)))
                                              (color->gray (cddddr byte-list)))]))))

(color->gray test)